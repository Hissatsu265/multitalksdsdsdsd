import gradio as gr
import json
import os
import subprocess
import shutil
from datetime import datetime
import uuid

def create_multitalk_demo():
    # T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ n·∫øu ch∆∞a t·ªìn t·∫°i
    os.makedirs("multitalk_data", exist_ok=True)
    
    def process_multitalk(prompt, image_path, audio1_path, bbox1_coords, 
                         audio2_path, bbox2_coords, use_two_audio):
        try:
            # T·∫°o ID duy nh·∫•t cho session
            session_id = str(uuid.uuid4())[:8]
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            # T·∫°o th∆∞ m·ª•c cho session n√†y
            session_folder = f"multitalk_data/{timestamp}_{session_id}"
            os.makedirs(session_folder, exist_ok=True)
            
            # Copy c√°c file input v√†o session folder
            if image_path and os.path.exists(image_path):
                image_filename = f"image_{session_id}.{image_path.split('.')[-1]}"
                image_dest = os.path.join(session_folder, image_filename)
                shutil.copy(image_path, image_dest)
            else:
                return "L·ªói: Kh√¥ng t√¨m th·∫•y file ·∫£nh", None
            
            if audio1_path and os.path.exists(audio1_path):
                audio1_filename = f"audio1_{session_id}.{audio1_path.split('.')[-1]}"
                audio1_dest = os.path.join(session_folder, audio1_filename)
                shutil.copy(audio1_path, audio1_dest)
            else:
                return "L·ªói: Kh√¥ng t√¨m th·∫•y file audio 1", None
            
            # T·∫°o JSON config
            config = {
                "prompt": prompt if prompt else "",
                "cond_image": image_dest,
                "cond_audio": {
                    "person1": audio1_dest
                }
            }
            
            # N·∫øu s·ª≠ d·ª•ng 2 audio
            if use_two_audio and audio2_path and os.path.exists(audio2_path):
                audio2_filename = f"audio2_{session_id}.{audio2_path.split('.')[-1]}"
                audio2_dest = os.path.join(session_folder, audio2_filename)
                shutil.copy(audio2_path, audio2_dest)
                
                config["audio_type"] = "add"
                config["cond_audio"]["person2"] = audio2_dest
                
                # Parse bbox coordinates
                try:
                    if bbox1_coords:
                        bbox1 = [int(x.strip()) for x in bbox1_coords.split(',')]
                        if len(bbox1) != 4:
                            return "L·ªói: Bbox person1 ph·∫£i c√≥ 4 s·ªë (x,y,w,h)", None
                    else:
                        bbox1 = [350, 600, 220, 400]  # default
                    
                    if bbox2_coords:
                        bbox2 = [int(x.strip()) for x in bbox2_coords.split(',')]
                        if len(bbox2) != 4:
                            return "L·ªói: Bbox person2 ph·∫£i c√≥ 4 s·ªë (x,y,w,h)", None
                    else:
                        bbox2 = [300, 300, 280, 300]  # default
                    
                    config["bbox"] = {
                        "person1": bbox1,
                        "person2": bbox2
                    }
                except ValueError:
                    return "L·ªói: T·ªça ƒë·ªô bbox ph·∫£i l√† s·ªë nguy√™n", None
            
            # L∆∞u JSON config
            json_path = os.path.join(session_folder, f"config_{session_id}.json")
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
            
            # T·∫°o t√™n file output
            output_name = f"multiperson_{session_id}"
            
            # T·∫°o l·ªánh ch·∫°y
            cmd = [
                "python3", "generate_multitalk.py",
                "--ckpt_dir", "weights/Wan2.1-I2V-14B-480P",
                "--wav2vec_dir", "weights/chinese-wav2vec2-base",
                "--input_json", json_path,
                "--sample_steps", "15",
                "--num_persistent_param_in_dit", "11000000000",
                "--mode", "streaming",
                "--use_teacache",
                "--sample_shift", "9",
                "--use_apg", "--apg_momentum", "-0.74", "--apg_norm_threshold", "52",
                "--teacache_thresh", "0.2",
                "--size", "multitalk-480",
                "--motion_frame", "25",
                "--sample_text_guide_scale", "7",
                "--sample_audio_guide_scale", "4",
                "--save_file", output_name
            ]
            
            # Ch·∫°y l·ªánh
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=".")
            
            if result.returncode != 0:
                error_msg = f"L·ªói khi ch·∫°y MultiTalk:\nSTDOUT: {result.stdout}\nSTDERR: {result.stderr}"
                return error_msg, None
            
            # T√¨m file video k·∫øt qu·∫£
            possible_extensions = ['.mp4', '.avi', '.mov', '.mkv']
            video_path = None
            
            for ext in possible_extensions:
                potential_path = f"{output_name}{ext}"
                if os.path.exists(potential_path):
                    video_path = potential_path
                    break
            
            if not video_path:
                return f"Kh√¥ng t√¨m th·∫•y video k·∫øt qu·∫£ v·ªõi t√™n {output_name}", None
            
            # Copy video v√†o session folder
            video_dest = os.path.join(session_folder, os.path.basename(video_path))
            shutil.copy(video_path, video_dest)
            
            success_msg = f"ƒê√£ t·∫°o video th√†nh c√¥ng!\nSession ID: {session_id}\nTh∆∞ m·ª•c: {session_folder}\nConfig JSON: {json_path}"
            
            return success_msg, video_dest
            
        except Exception as e:
            return f"L·ªói: {str(e)}", None
    
    def toggle_audio2_inputs(use_two_audio):
        return [
            gr.update(visible=use_two_audio),  # audio2
            gr.update(visible=use_two_audio),  # bbox1
            gr.update(visible=use_two_audio)   # bbox2
        ]
    
    # T·∫°o giao di·ªán Gradio
    with gr.Blocks(title="MultiTalk Demo", theme=gr.themes.Soft()) as demo:
        gr.Markdown("# üé≠ MultiTalk Demo")
        gr.Markdown("T·∫°o video talking head t·ª´ h√¨nh ·∫£nh v√† audio")
        
        with gr.Row():
            with gr.Column(scale=1):
                gr.Markdown("## üìù Inputs")
                
                prompt = gr.Textbox(
                    label="Prompt",
                    placeholder="Nh·∫≠p prompt m√¥ t·∫£ (c√≥ th·ªÉ ƒë·ªÉ tr·ªëng)",
                    lines=2
                )
                
                image_path = gr.Textbox(
                    label="ƒê∆∞·ªùng d·∫´n ·∫£nh",
                    placeholder="/path/to/image.jpg",
                    info="ƒê∆∞·ªùng d·∫´n t·ªõi file ·∫£nh"
                )
                
                audio1_path = gr.Textbox(
                    label="ƒê∆∞·ªùng d·∫´n audio ng∆∞·ªùi 1",
                    placeholder="/path/to/audio1.wav",
                    info="ƒê∆∞·ªùng d·∫´n t·ªõi file audio cho ng∆∞·ªùi 1"
                )
                
                use_two_audio = gr.Checkbox(
                    label="S·ª≠ d·ª•ng 2 ng∆∞·ªùi (2 audio)",
                    value=False,
                    info="Tick ƒë·ªÉ b·∫≠t ch·∫ø ƒë·ªô 2 ng∆∞·ªùi"
                )
                
                audio2_path = gr.Textbox(
                    label="ƒê∆∞·ªùng d·∫´n audio ng∆∞·ªùi 2",
                    placeholder="/path/to/audio2.wav",
                    info="ƒê∆∞·ªùng d·∫´n t·ªõi file audio cho ng∆∞·ªùi 2",
                    visible=False
                )
                
                bbox1_coords = gr.Textbox(
                    label="T·ªça ƒë·ªô bbox ng∆∞·ªùi 1 (x,y,w,h)",
                    placeholder="350,600,220,400",
                    info="4 s·ªë c√°ch nhau b·ªüi d·∫•u ph·∫©y",
                    visible=False
                )
                
                bbox2_coords = gr.Textbox(
                    label="T·ªça ƒë·ªô bbox ng∆∞·ªùi 2 (x,y,w,h)",
                    placeholder="300,300,280,300",
                    info="4 s·ªë c√°ch nhau b·ªüi d·∫•u ph·∫©y",
                    visible=False
                )
                
                generate_btn = gr.Button("üöÄ T·∫°o Video", variant="primary", size="lg")
                
            with gr.Column(scale=1):
                gr.Markdown("## üì§ Outputs")
                
                status_output = gr.Textbox(
                    label="Tr·∫°ng th√°i",
                    lines=10,
                    max_lines=20,
                    interactive=False
                )
                
                video_output = gr.Video(
                    label="Video k·∫øt qu·∫£",
                    height=400
                )
        
        # Event handlers
        use_two_audio.change(
            fn=toggle_audio2_inputs,
            inputs=[use_two_audio],
            outputs=[audio2_path, bbox1_coords, bbox2_coords]
        )
        
        generate_btn.click(
            fn=process_multitalk,
            inputs=[
                prompt, image_path, audio1_path, bbox1_coords,
                audio2_path, bbox2_coords, use_two_audio
            ],
            outputs=[status_output, video_output]
        )
        
        # Th√™m th√¥ng tin h∆∞·ªõng d·∫´n
        with gr.Accordion("üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", open=False):
            gr.Markdown("""
            ### C√°ch s·ª≠ d·ª•ng:
            1. **Prompt**: Nh·∫≠p m√¥ t·∫£ vƒÉn b·∫£n (c√≥ th·ªÉ ƒë·ªÉ tr·ªëng)
            2. **ƒê∆∞·ªùng d·∫´n ·∫£nh**: Nh·∫≠p ƒë∆∞·ªùng d·∫´n t·ªõi file ·∫£nh ƒë·∫ßu v√†o
            3. **Audio ng∆∞·ªùi 1**: Nh·∫≠p ƒë∆∞·ªùng d·∫´n t·ªõi file audio cho ng∆∞·ªùi th·ª© nh·∫•t
            4. **S·ª≠ d·ª•ng 2 ng∆∞·ªùi**: Tick v√†o n·∫øu mu·ªën s·ª≠ d·ª•ng 2 ng∆∞·ªùi trong video
            5. **Audio ng∆∞·ªùi 2**: (N·∫øu d√πng 2 ng∆∞·ªùi) ƒê∆∞·ªùng d·∫´n audio cho ng∆∞·ªùi th·ª© hai
            6. **T·ªça ƒë·ªô bbox**: (N·∫øu d√πng 2 ng∆∞·ªùi) T·ªça ƒë·ªô v√πng m·∫∑t, format: x,y,width,height
            
            ### L∆∞u √Ω:
            - T·∫•t c·∫£ files s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c `multitalk_data/`
            - File JSON config s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫°o
            - Video k·∫øt qu·∫£ s·∫Ω c√≥ t√™n `multiperson_[session_id]`
            - ƒê·∫£m b·∫£o c√°c ƒë∆∞·ªùng d·∫´n file input ƒë√£ t·ªìn t·∫°i
            """)
    
    return demo

# Ch·∫°y demo
if __name__ == "__main__":
    demo = create_multitalk_demo()
    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=True,
        debug=True
    )